import tensorflow as tf
import os
from PIL import Image
import IPython.display as display
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from matplotlib import pyplot as plt
from matplotlib.pyplot import figure
import seaborn as sns
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
from tensorflow.keras.callbacks import History


def total_files(folder_path):
    num_files = len([f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))])
    return num_files
train_files_healthy = "Dataset\Train\Healthy"
train_files_early = "Dataset\Train\Early_Blight"
train_files_late = "Dataset\Train\Late_Blight"

test_files_healthy = "Dataset\Test\Healthy"
test_files_early = "Dataset\Test\Early_Blight"
test_files_late = "Dataset\Test\Late_Blight"

valid_files_healthy = "Dataset\Valid\Healthy"
valid_files_early = "Dataset\Valid\Early_Blight"
valid_files_late = "Dataset\Valid\Late_Blight"

print("Number of healthy leaf images in training set", total_files(train_files_healthy))
print("Number of early blight leaf images in training set", total_files(train_files_early))
print("Number of late blight leaf images in training set", total_files(train_files_late))

print("========================================================")

print("Number of healthy leaf images in test set", total_files(test_files_healthy))
print("Number of early blight leaf images in test set", total_files(test_files_early))
print("Number of late blight leaf images in test set", total_files(test_files_late))

print("========================================================")

print("Number of healthy leaf images in validation set", total_files(valid_files_healthy))
print("Number of early blight leaf images in validation set", total_files(valid_files_early))
print("Number of late blight leaf images in validation set", total_files(valid_files_late))


from PIL import Image
import IPython.display as display

image_path = 'Dataset\Train\Healthy\Potato_healthy-78-_0_547.jpg'

with open(image_path, 'rb') as f:
    display.display(display.Image(data=f.read(), width=500))


image_path = 'Dataset\Train\Late_Blight\ea2bb076-a483-4570-88ac-8ab236d4bb92___RS_LB 2503.JPG'

with open(image_path, 'rb') as f:
    display.display(display.Image(data=f.read(), width=500))


train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)


train_generator = train_datagen.flow_from_directory('Dataset\Train',
                                                    target_size=(225, 225),
                                                    batch_size=32,
                                                    class_mode='categorical')

validation_generator = test_datagen.flow_from_directory('Dataset\Valid',
                                                        target_size=(225, 225),
                                                        batch_size=32,
                                                        class_mode='categorical')


model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(225, 225, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='sigmoid'))


model.summary()


model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


history = model.fit(train_generator,
                    batch_size=16,
                    epochs=5,
                    validation_data=validation_generator,
                    validation_batch_size=16
                    )

sns.set_theme()
sns.set_context("poster")

figure(figsize=(25, 25), dpi=100)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()


model.save("cnn/model.h5")


model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)


def preprocess_image(image_path, target_size=(225, 225)):
    img = load_img(image_path, target_size=target_size)
    x = img_to_array(img)
    x = x.astype('float32') / 255.
    x = np.expand_dims(x, axis=0)
    return x

x = preprocess_image('Dataset\Test\Late_Blight\8829e413-5a7a-4680-b873-e71dfa9dbfe4___RS_LB 3974.JPG')
predictions = model.predict(x)
predictions[0] 


labels = train_generator.class_indices
labels = {v: k for k, v in labels.items()}
labels


predicted_label = labels[np.argmax(predictions)]
print(predicted_label)
